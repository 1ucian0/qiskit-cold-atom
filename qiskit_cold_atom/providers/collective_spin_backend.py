# This code is part of Qiskit.
#
# (C) Copyright IBM 2021.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

"""Backend to simulate collective spin experiments."""

from typing import Optional

from qiskit.providers import ProviderV1 as Provider

from qiskit_cold_atom.spins.spin_simulator_backend import SpinSimulator


class CollectiveSpinSimulator(SpinSimulator):
    """Simulator backend of a collective spin system of trapped BECs in optical tweezers."""

    def __init__(self, n_tweezers: int = 3, provider: Optional[Provider] = None):
        """Create a new collective spin simulator backend.

        Args:
            n_tweezers: The number of optical tweezers.
            provider: The provider to which the backend may be added.
        """

        single_spin_coupl = [[i] for i in range(n_tweezers)]
        two_spin_coupl = [[i, i + 1] for i in range(n_tweezers - 1)] + [
            [i + 1, i] for i in range(n_tweezers - 1)
        ]

        configuration = {
            "backend_name": "collective_spin_simulator",
            "cold_atom_type": "spin",
            "backend_version": "0.0.1",
            "atomic_species": ["na"],
            "simulator": True,
            "local": True,
            "coupling_map": None,
            "description": "simulator of a collective hardware. Each wire in the circuit denotes the "
            "orientation of one collective spin in the hardware",
            "basis_gates": ["rLx", "rLz", "rLz2", "OAT", "rLzz"],
            "memory": True,
            "n_qubits": 3,
            "conditional": False,
            "max_shots": 1e6,
            "max_experiments": 10,
            "open_pulse": False,
            "gates": [
                {
                    "coupling_map": single_spin_coupl,
                    "description": "local rotation of the coherent spin around x",
                    "name": "rx",
                    "parameters": ["omega"],
                    "qasm_def": "gate rx(omega) {}",
                },
                {
                    "coupling_map": single_spin_coupl,
                    "description": "local rotation of the coherent spin around z",
                    "name": "rz",
                    "parameters": ["delta"],
                    "qasm_def": "gate rz(delta) {}",
                },
                {
                    "coupling_map": single_spin_coupl,
                    "description": "local spin evolution generated by one-axis "
                    "twisting Hamiltonian Lz^2",
                    "name": "rz2",
                    "parameters": ["chi"],
                    "qasm_def": "gate rz2(chi) {}",
                },
                {
                    "coupling_map": single_spin_coupl,
                    "description": "local spin evolution generated by (chi*Lz^2 + "
                    "delta*Lz + omega*Lx)",
                    "name": "oat",
                    "parameters": ["chi", "delta", "omega"],
                    "qasm_def": "gate rot(chi, delta, omega) {}",
                },
                {
                    "coupling_map": two_spin_coupl,
                    "description": "ZZ-interaction coupling two collective spins",
                    "name": "lzz",
                    "parameters": ["gamma"],
                    "qasm_def": "gate lzz(gamma) {}",
                },
            ],
            "supported_instructions": [
                "rLz",
                "rLx",
                "rLz2",
                "OAT",
                "rLzz",
                "measure",
                "barrier",
            ],
        }

        super().__init__(config_dict=configuration, provider=provider)
